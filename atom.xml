<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>老运维人员</title><link href="http://opslinux.com/" rel="alternate"></link><link href="http://opslinux.com/atom.xml" rel="self"></link><id>http://opslinux.com/</id><updated>2013-10-25T10:20:00+08:00</updated><entry><title>Nginx打造3w高并发网站</title><link href="http://opslinux.com/post/2013-10-25-nginxda-zao-3wgao-bing-fa-wang-zhan/" rel="alternate"></link><updated>2013-10-25T10:20:00+08:00</updated><author><name>创e</name></author><id>tag:opslinux.com,2013-10-25:post/2013-10-25-nginxda-zao-3wgao-bing-fa-wang-zhan/</id><summary type="html">&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;tt class="docutils"&gt;/Users/ce/workspace/pelican/blog/content/nginx优化.rst&lt;/tt&gt;, line 9)&lt;/p&gt;
&lt;p&gt;Unknown directive type &amp;quot;toctree&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. toctree::
   :maxdepth: 2

&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="nginx"&gt;
&lt;h2&gt;Nginx 优化&lt;/h2&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;编译安装过程优化&lt;/h3&gt;
&lt;p&gt;在编译Nginx时，默认以debug模式进行，而在debug模式下会插入很多跟踪和ASSERT之类的信息，编译完成后，一个Nginx要有好几兆字节。在编译前取消Nginx的debug模式，编译完成后Nginx只有几百千字节，因此可以在编译之前，修改相关源码，取消debug模式，具体方法如下：
在Nginx源码文件被解压后，找到源码目录下的auto/cc/gcc文件，在其中找到如下几行:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# debug
CFLAGS=”$CFLAGS -g”
&lt;/pre&gt;
&lt;div class="section" id="cpucpu"&gt;
&lt;h4&gt;为特定的CPU指定CPU类型编译优化&lt;/h4&gt;
&lt;p&gt;在编译Nginx时，默认的GCC编译参数是“-O”，要优化GCC编译，可以使用以下两个参数:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
--with-cc-opt='-O3'
--with-cpu-opt=CPU  #为特定的 CPU 编译，有效的值包括：pentium, pentiumpro, pentium3, pentium4, athlon, opteron, amd64, sparc32, sparc64, ppc64
&lt;/pre&gt;
&lt;p&gt;要确定CPU类型，可以通过如下命令:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[root&amp;#64;localhost home]#cat /proc/cpuinfo | grep &amp;quot;model name&amp;quot;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="tcmallocnginx"&gt;
&lt;h4&gt;利用TCMalloc优化Nginx的性能&lt;/h4&gt;
&lt;p&gt;TCMalloc的全称为Thread-Caching Malloc，是谷歌开发的开源工具“google-perftools”中的一个成员。与标准的glibc库的malloc相比，TCMalloc库在内存分配效率和速度上要高很多，这在很大程度上提高了服务器在高并发情况下的性能，从而降低系统负载。下面简单介绍如何为Nginx添加TCMalloc库支持。
要安装TCMalloc库，需要安装libunwind（32位操作系统不需要安装）和google-perftools两个软件包，libunwind库为基于64位CPU和操作系统的程序提供了基本函数调用链和函数调用寄存器功能。下面介绍利用TCMalloc优化Nginx的具体操作过程：&lt;/p&gt;
&lt;div class="section" id="libunwind"&gt;
&lt;h5&gt;1.安装libunwind库&lt;/h5&gt;
&lt;p&gt;可以从http://download.savannah.gnu.org/releases/libunwind下载相应的libunwind版本，这里下载的是libunwind-0.99-alpha.tar.gz，安装过程如下&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[root&amp;#64;localhost home]#tar zxvf libunwind-0.99-alpha.tar.gz
[root&amp;#64;localhost home]# cd libunwind-0.99-alpha/
[root&amp;#64;localhost libunwind-0.99-alpha]#CFLAGS=-fPIC ./configure
[root&amp;#64;localhost libunwind-0.99-alpha]#make CFLAGS=-fPIC
[root&amp;#64;localhost libunwind-0.99-alpha]#make CFLAGS=-fPIC install
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="google-perftools"&gt;
&lt;h5&gt;2.安装google-perftools&lt;/h5&gt;
&lt;p&gt;可以从http://google-perftools.googlecode.com下载相应的google-perftools版本，这里下载的是google-perftools-1.8.tar.gz，安装过程如下:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[root&amp;#64;localhost home]# tar zxvf google-perftools-1.8.tar.gz
[root&amp;#64;localhost home]# cd google-perftools-1.8/
[root&amp;#64;localhost google-perftools-1.8]# ./configure
[root&amp;#64;localhost google-perftools-1.8]# make &amp;amp;&amp;amp; make install
[root&amp;#64;localhost google-perftools-1.8]# echo &amp;quot;/usr/local/lib&amp;quot; &amp;gt; /etc/ld.so.conf.d/usr_local_lib.conf
[root&amp;#64;localhost google-perftools-1.8]# ldconfig
&lt;/pre&gt;
&lt;p&gt;至此，google-perftools安装完成。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h5&gt;3.重新编译Nginx&lt;/h5&gt;
&lt;p&gt;为了使Nginx支持google-perftools，需要在安装过程中添加“–with-google_perftools_module”选项重新编译Nginx，安装代码如下:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[root&amp;#64;localhostnginx-0.7.65]#./configure \
&amp;gt;--with-google_perftools_module --with-http_stub_status_module  --prefix=/opt/nginx
[root&amp;#64;localhost nginx-0.7.65]#make
[root&amp;#64;localhost nginx-0.7.65]#make install
&lt;/pre&gt;
&lt;p&gt;到这里Nginx安装完成。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h5&gt;4.为google-perftools添加线程目录&lt;/h5&gt;
&lt;p&gt;创建一个线程目录，这里将文件放在/tmp/tcmalloc下，操作如下:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[root&amp;#64;localhost home]#mkdir /tmp/tcmalloc
[root&amp;#64;localhost home]#chmod 0777 /tmp/tcmalloc
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h5&gt;5.修改Nginx主配置文件&lt;/h5&gt;
&lt;p&gt;修改nginx.conf文件，在pid这行的下面添加如下代码:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#pid        logs/nginx.pid;
google_perftools_profiles /tmp/tcmalloc;
&lt;/pre&gt;
&lt;p&gt;接着，重启Nginx，完成google-perftools的加载。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h5&gt;6.验证运行状态&lt;/h5&gt;
&lt;p&gt;为了验证google-perftools已经正常加载，通过如下命令查看:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[root&amp;#64; localhost home]# lsof -n | grep tcmalloc
nginx      2395 nobody   9w  REG    8,8       0    1599440 /tmp/tcmalloc.2395
nginx      2396 nobody   11w REG   8,8       0    1599443 /tmp/tcmalloc.2396
nginx      2397 nobody   13w REG  8,8        0    1599441  /tmp/tcmalloc.2397
nginx     2398 nobody    15w REG  8,8     0    1599442 /tmp/tcmalloc.2398
&lt;/pre&gt;
&lt;p&gt;由于在Nginx配置文件中，设置worker_processes的值为4，因此开启了4个Nginx线程，每个线程会有一行记录。每个线程文件后面的数字值就是启动的Nginx的PID值。
至此，利用TCMalloc优化Nginx的操作完成。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;Nginx内核参数优化&lt;/h3&gt;
&lt;p&gt;内核参数的优化，主要是在Linux系统中针对Nginx应用而进行的系统内核参数优化，常见的优化参数值如下。&lt;/p&gt;
&lt;p&gt;下面给出一个优化实例以供参考:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
net.ipv4.tcp_max_tw_buckets = 6000
net.ipv4.ip_local_port_range = 1024 65000
net.ipv4.tcp_tw_recycle = 1
net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_syncookies = 1
net.core.somaxconn = 262144
net.core.netdev_max_backlog = 262144
net.ipv4.tcp_max_orphans = 262144
net.ipv4.tcp_max_syn_backlog = 262144
net.ipv4.tcp_synack_retries = 1
net.ipv4.tcp_syn_retries = 1
net.ipv4.tcp_fin_timeout = 1
net.ipv4.tcp_keepalive_time = 30
&lt;/pre&gt;
&lt;p&gt;将上面的内核参数值加入/etc/sysctl.conf文件中，然后执行如下命令使之生效:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[root&amp;#64; localhost home]#/sbin/sysctl -p
&lt;/pre&gt;
&lt;p&gt;下面是对实例中选项的含义进行介绍：&lt;/p&gt;
&lt;p&gt;net.ipv4.tcp_max_tw_buckets参数用来设定timewait的数量，默认是180000，这里设为6000。&lt;/p&gt;
&lt;p&gt;net.ipv4.ip_local_port_range选项用来设定允许系统打开的端口范围。&lt;/p&gt;
&lt;p&gt;net.ipv4.tcp_tw_recycle选项用于设置启用timewait快速回收。&lt;/p&gt;
&lt;p&gt;net.ipv4.tcp_tw_reuse选项用于设置开启重用，允许将TIME-WAIT sockets重新用于新的TCP连接。&lt;/p&gt;
&lt;p&gt;net.ipv4.tcp_syncookies选项用于设置开启SYN Cookies，当出现SYN等待队列溢出时，启用cookies进行处理。&lt;/p&gt;
&lt;p&gt;net.core.somaxconn选项默认值是128， 这个参数用于调节系统同时发起的tcp连接数，在高并发的请求中，默认的值可能会导致链接超时或者重传，因此，需要结合并发请求数来调节此值。&lt;/p&gt;
&lt;p&gt;net.core.netdev_max_backlog选项表示当每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许发送到队列的数据包的最大数目。&lt;/p&gt;
&lt;p&gt;net.ipv4.tcp_max_orphans选项用于设定系统中最多有多少个TCP套接字不被关联到任何一个用户文件句柄上。如果超过这个数字，孤立连接将立即被复位并打印出警告信息。这个限制只是为了防止简单的DoS攻击。不能过分依靠这个限制甚至人为减小这个值，更多的情况是增加这个值。&lt;/p&gt;
&lt;p&gt;net.ipv4.tcp_max_syn_backlog选项用于记录那些尚未收到客户端确认信息的连接请求的最大值。对于有128MB内存的系统而言，此参数的默认值是1024，对小内存的系统则是128。&lt;/p&gt;
&lt;p&gt;net.ipv4.tcp_synack_retries参数的值决定了内核放弃连接之前发送SYN+ACK包的数量。&lt;/p&gt;
&lt;p&gt;net.ipv4.tcp_syn_retries选项表示在内核放弃建立连接之前发送SYN包的数量。&lt;/p&gt;
&lt;p&gt;net.ipv4.tcp_fin_timeout选项决定了套接字保持在FIN-WAIT-2状态的时间。默认值是60秒。正确设置这个值非常重要，有时候即使一个负载很小的Web服务器，也会出现因为大量的死套接字而产生内存溢出的风险。&lt;/p&gt;
&lt;p&gt;net.ipv4.tcp_keepalive_time选项表示当keepalive启用的时候，TCP发送keepalive消息的频度。默认值是2（单位是小时）。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="nginx"></category><category term="高并发"></category><category term="web"></category></entry><entry><title>使用Vagrant打造你的虚拟环境</title><link href="http://opslinux.com/post/2013-09-14-shi-yong-vagrantda-zao-ni-de-xu-ni-huan-jing/" rel="alternate"></link><updated>2013-09-14T00:00:00+08:00</updated><author><name>皓禹</name></author><id>tag:opslinux.com,2013-09-14:post/2013-09-14-shi-yong-vagrantda-zao-ni-de-xu-ni-huan-jing/</id><summary type="html">&lt;h1&gt;使用Vagrant打造你的虚拟环境&lt;/h1&gt;
&lt;p&gt;因为要做mongDB的replication+sharding的实验，领导给我推荐Vagrant来模拟虚拟环境做部署实践，稍微了解够大为震惊，因网上文档不是特别容易理解，留下一份以备后用&lt;/p&gt;
&lt;p&gt;vagrant的强大在于是一个镜像，配置完以后镜像可以放到任何地方去，真正做到了一劳永逸了。&lt;/p&gt;
&lt;p&gt;总结一下自己使用vagrant的一点笔记，以免以后忘记还得再去翻官方文档。&lt;/p&gt;
&lt;p&gt;vagrant的官方网站：http://www.vagrantup.com/ 现在又改版了，挺漂亮的。&lt;/p&gt;
&lt;p&gt;vagrant的一些镜像：http://www.vagrantbox.es/ 各种linux都有。
然后按照官方说的，执行这三部，然后一个虚拟机就起来了。
注：先要安装VirtualBox&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;配置box&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;vagrant box add debian http://ergonlogic.com/files/boxes/debian-current.box  &lt;span class="c"&gt;#增加一个box,debian就是box的title 后面跟vagrant上的virtualbox镜像地址&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;vagrant init debian &lt;span class="c"&gt;#初始化debian&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;vagrant up   &lt;span class="c"&gt;#这个是真正的启动&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意国内网速访问很慢 这里可以先去 &lt;code&gt;http://www.vagrantbox.es/&lt;/code&gt; 下载你需要的镜像 然后把http那行直接换成你本地镜像的路径就ok比较方便和快捷&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;连接虚拟主机&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你会看到终端显示了启动过程，启动完成后，我们就可以用 SSH 登录虚拟机了，剩下的步骤就是在虚拟机里配置你要运行的各种环境和参数了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;vagrant ssh  &lt;span class="c"&gt;# SSH 登录 ssh的后面可以跟你的title来连接不同的vm主机&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;打包分发&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当你配置好开发环境后，退出并关闭虚拟机。在终端里对开发环境进行打包：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;vagrant package
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;打包完成后会在当前目录生成一个 package.box 的文件，将这个文件传给其他用户，其他用户只要添加这个 box 并用其初始化自己的开发目录就能得到一个一模一样的开发环境了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用命令&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;vagrant init  &lt;span class="c"&gt;# 初始化&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;vagrant up  &lt;span class="c"&gt;# 启动虚拟机&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;vagrant halt  &lt;span class="c"&gt;# 关闭虚拟机&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;vagrant reload  &lt;span class="c"&gt;# 重启虚拟机&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;vagrant ssh  &lt;span class="c"&gt;# SSH 至虚拟机&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;vagrant status  &lt;span class="c"&gt;# 查看虚拟机运行状态&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;vagrant destroy  &lt;span class="c"&gt;# 销毁当前虚拟机&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;box管理&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$vagrant&lt;/span&gt; box list
&lt;span class="nv"&gt;$vagrant&lt;/span&gt; box add
&lt;span class="nv"&gt;$vagrant&lt;/span&gt; box remove
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更多内容请查阅官方文档 http://docs.vagrantup.com/&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Multi-VM 多虚拟机&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;VAGRANTFILE_API_VERSION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;    &lt;span class="c"&gt;#定义版本&lt;/span&gt;
Vagrant.configure&lt;span class="o"&gt;(&lt;/span&gt;VAGRANTFILE_API_VERSION&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; |config|  &lt;span class="c"&gt;#使用内部2版本&lt;/span&gt;
  config.vm.define :debian1 &lt;span class="k"&gt;do&lt;/span&gt; |debian1|   &lt;span class="c"&gt;#定义第一台虚拟机，||里面就类似一个变量设置参数时使用 &lt;/span&gt;
     debian1.vm.box &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;debian1&amp;quot;&lt;/span&gt;             &lt;span class="c"&gt;#设置box名为debian1&lt;/span&gt;
     debian1.vm.host_name &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;debian1&amp;quot;&lt;/span&gt;      &lt;span class="c"&gt;#设置hostname为debian1&lt;/span&gt;
     debian1.vm.network :private_network, ip: &lt;span class="s2"&gt;&amp;quot;192.168.1.11&amp;quot;&lt;/span&gt; &lt;span class="c"&gt;#设置网络为内部网络 ip为192.168.1.11&lt;/span&gt;
  end
  config.vm.define :debian2 &lt;span class="k"&gt;do&lt;/span&gt; |debian2|
     debian2.vm.box &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;debian2&amp;quot;&lt;/span&gt;
     debian2.vm.host_name &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;debian2&amp;quot;&lt;/span&gt;
     debian2.vm.network :private_network, ip: &lt;span class="s2"&gt;&amp;quot;192.168.1.12&amp;quot;&lt;/span&gt;
  end
  config.vm.define :debian3 &lt;span class="k"&gt;do&lt;/span&gt; |debian3|
     debian3.vm.box &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;debian3&amp;quot;&lt;/span&gt;
     debian3.vm.host_name &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;debian3&amp;quot;&lt;/span&gt;
     debian3.vm.network :private_network, ip: &lt;span class="s2"&gt;&amp;quot;192.168.1.13&amp;quot;&lt;/span&gt;
  end

end
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意语法格式就好，配置前关闭虚拟机，配置完后打开虚拟机。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意事项&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用 Apache/Nginx 时会出现诸如图片修改后但页面刷新仍然是旧文件的情况，是由于静态文件缓存造成的。需要对虚拟机里的 Apache/Nginx 配置文件进行修改：&lt;/p&gt;
&lt;p&gt;Apache 配置添加:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;EnableSendfile off
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nginx 配置添加:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sendfile off;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>zabbix监控mongoDB</title><link href="http://opslinux.com/post/2013-09-09-zabbixjian-kong-mongodb/" rel="alternate"></link><updated>2013-09-09T00:00:00+08:00</updated><author><name>皓禹</name></author><id>tag:opslinux.com,2013-09-09:post/2013-09-09-zabbixjian-kong-mongodb/</id><summary type="html">&lt;h1&gt;zabbix监控mongoDB&lt;/h1&gt;
&lt;p&gt;推荐文档：&lt;/p&gt;
&lt;p&gt;官方推荐：http://docs.mongodb.org/manual/administration/monitoring/&lt;/p&gt;
&lt;p&gt;因我使用的是zabbix.所以选择：&lt;/p&gt;
&lt;p&gt;https://code.google.com/p/mikoomi/wiki/03&lt;/p&gt;
&lt;p&gt;插件下载地址：&lt;/p&gt;
&lt;p&gt;http://mikoomi.googlecode.com/svn/plugins/MongoDB%20Plugin/&lt;/p&gt;
&lt;p&gt;学习地址：&lt;/p&gt;
&lt;p&gt;https://blog.serverdensity.com/mongodb-monitoring-db-serverstatus/&lt;/p&gt;
&lt;p&gt;http://www.yaukb.com/2012/05/zabbix_mongodb/&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.在Zabbix Server上安装php MongoDB驱动：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[root@localhost conf.d]# pecl install mongo&lt;br /&gt;
WARNING: channel “pecl.php.net” has updated its protocols, use “pecl channel-update pecl.php.net” to update
downloading mongo-1.4.3.tgz …
Starting to download mongo-1.4.3.tgz (140,481 bytes)
…………………………done: 140,481 bytes
84 source files, building
running: phpize
Configuring for:
PHP Api Version:         20100412
Zend Module Api No:      20100525
Zend Extension Api No:   220100525&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;p&gt;Build process completed successfully
Installing ‘/usr/lib64/php/modules/mongo.so’
install ok: channel://pecl.php.net/mongo-1.4.3
configuration option “php_ini” is not set to php.ini location
You should add “extension=mongo.so” to php.ini
You have new mail in /var/spool/mail/root&lt;/p&gt;
&lt;p&gt;[root@localhost conf.d]# vim /etc/php.ini&lt;br /&gt;
[root@localhost conf.d]# /etc/init.d/httpd reload&lt;br /&gt; 
[root@localhost conf.d]# php -m |grep mongo&lt;br /&gt;
mongo&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.下载：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[root@localhost externalscripts]# pwd&lt;br /&gt;
/etc/zabbix/externalscripts&lt;br /&gt;
[root@localhost externalscripts]# wget http://mikoomi.googlecode.com/svn/plugins/MongoDB%20Plugin/mikoomi-mongodb-plugin.php&lt;br /&gt;
[root@localhost externalscripts]# wget http://mikoomi.googlecode.com/svn/plugins/MongoDB%20Plugin/mikoomi-mongodb-plugin.sh&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.导入模板 建立主机：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将MongoDB_Plugin_template_export.xml导入到zabbix中
修改"Miscellaneous: Data Collector"监控项的key值，因默认提供的值有错误：
mikoomi-mongodb-plugin.sh["--", "-h", "{$MONGODB_HOSTNAME}", "-p", "{$MONGODB_PORT}", "-z", "{$MONGODB_ZABBIX_NAME}"]&lt;/p&gt;
&lt;p&gt;在zabbix里建立主机，定义宏：&lt;br /&gt;
{$MONGODB_HOSTNAME} = 10.0.199.30   #即ip地址&lt;br /&gt;
{$MONGODB_PORT} = 27017 #监控mongdb的端口号&lt;br /&gt;
{$MONGODB_ZABBIX_NAME} =MongDB1 #hostname 就是主机名 不要写显示名 这样会接受不到数据 一定是hostname&lt;br /&gt;
然后给主机连接上模板即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.测试：&lt;br /&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[root@localhost externalscripts]# ./mikoomi-mongodb-plugin.sh -D -h10.0.199.30 -p27017 -z MongDB1
0
[root@localhost externalscripts]# less /tmp/mikoomi-mongodb-plugin.php_MongoDB1.log&lt;/p&gt;
&lt;p&gt;mikoomi-mongodb-plugin.php:Successfully connected to mongoDB using connect string root:passworda@MongDB1:27017
zabbix_sender [8413]: Warning: [line 66] ‘Key value’ required&lt;/p&gt;
&lt;p&gt;zabbix_sender [8413]: Warning: [line 68] ‘Key value’ required&lt;/p&gt;
&lt;p&gt;zabbix_sender [8414]: DEBUG: answer [{&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="s"&gt;&amp;quot;response&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;success&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="s"&gt;&amp;quot;info&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Processed 58 Failed 13 Total 71 Seconds spent 0.001618&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;sent: 71; skipped: 2; total: 73&lt;/p&gt;
&lt;p&gt;/tmp/mikoomi-mongodb-plugin.php_MongDB1.log (END)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;若出现  Failed 的数目和 Total数目相等的话 应该是  mikoomi-mongodb-plugin.sh 后面-z参数的 hostname没写对 这个hostname是zabbix主机的hostname即主机名 而不是显示名&lt;/code&gt;&lt;/p&gt;</summary></entry><entry><title>使用github和pelican搭建本站博客</title><link href="http://opslinux.com/post/2013-07-13-shi-yong-githubhe-pelicanda-jian-ben-zhan-bo-ke/" rel="alternate"></link><updated>2013-07-13T00:00:00+08:00</updated><author><name>皓禹</name></author><id>tag:opslinux.com,2013-07-13:post/2013-07-13-shi-yong-githubhe-pelicanda-jian-ben-zhan-bo-ke/</id><summary type="html">&lt;h2&gt;使用github和pelican搭建本站博客&lt;/h2&gt;
&lt;h3&gt;安装virtualenv虚拟环境&lt;/h3&gt;
&lt;p&gt;安装虚拟环境是为了防止污染，linux本身的python环境&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;easy_install&lt;/span&gt; &lt;span class="n"&gt;virtualenv&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;使用virtualenv&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;virtualenv pelican   &lt;span class="c"&gt;#创建虚拟环境&lt;/span&gt;
&lt;span class="nb"&gt;cd &lt;/span&gt;pelican
&lt;span class="nb"&gt;source &lt;/span&gt;bin/activate   &lt;span class="c"&gt;#激活虚拟环境&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;安装pelican和markdown&lt;/h3&gt;
&lt;p&gt;pelican 就是生成静态博客的程序&lt;br /&gt;
markdow 是写博客使用的轻量级标记语言,不会使用的同学可以查看&lt;a href="http://wowubuntu.com/markdown/"&gt;帮助&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;Markdown&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;ghp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;import&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;建立blog目录&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="n"&gt;myblog&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;myblog&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;开始创建&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;quickstart&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;基本按照提示设置就可以，稍后可以在pelicanconf.py文件中手动修改。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;.
|-- content &lt;span class="c"&gt;#所有文章放于此目录&lt;/span&gt;
|-- develop_server.sh  &lt;span class="c"&gt;#用于开启测试服务器&lt;/span&gt;
|-- Makefile   &lt;span class="c"&gt;#方便管理博客的Makefile&lt;/span&gt;
|-- output &lt;span class="c"&gt;#静态生成文件&lt;/span&gt;
|-- pelicanconf.py &lt;span class="c"&gt;#配置文件&lt;/span&gt;
|-- publishconf.py &lt;span class="c"&gt;#配置文件&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;写一篇文章&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;content&lt;/code&gt;目录新建一个&lt;code&gt;test.md&lt;/code&gt;文件, 填入一下内容:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Title: 文章标题
Date: 2013-04-18
Category: 文章类别
Tag: 标签1, 标签2    
这里是内容
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后执行:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用以生成html&lt;/p&gt;
&lt;p&gt;然后执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;develop_server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;开启一个测试服务器, 这会在本地 8000 端口建立一个测试web服务器, 可以使用浏览器打开:&lt;code&gt;http://localhost:8000&lt;/code&gt;来访问这个测试服务器, 然后就可以欣赏到你的博客了&lt;/p&gt;
&lt;h3&gt;Github上的准备&lt;/h3&gt;
&lt;p&gt;在Github上创建一个新项目，把这个项目clone到myblog文件夹下。然后按照Github的规定建立一个没有父节点的分支gh-pages。&lt;br /&gt;
注：在是用分支创建github的blog的时候，要先确保自己的github上有例如：zbing3.github.io命名的项目并且在&lt;code&gt;settings&lt;/code&gt;中开启Github Pages
如图：
&lt;img alt="Alt Github Pages" src="/static/upload/20130713144403.jpg" /&gt;
点击&lt;code&gt;Automatic Page Generator&lt;/code&gt;开启Github Pages服务&lt;/p&gt;
&lt;p&gt;进入output目录中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git init
&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout --orphan gh-pages
&lt;span class="nv"&gt;$ &lt;/span&gt;git add .
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit -m &lt;span class="s2"&gt;&amp;quot;first post&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git remote add origin git@github.com:zbing3/opslinux.git
&lt;span class="nv"&gt;$ &lt;/span&gt;git push origin gh-pages
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样上传完代码等10分钟左右，即可在浏览器中使用&lt;code&gt;http://zbing3.github.io/myblog&lt;/code&gt;就能访问到自己的博客&lt;/p&gt;
&lt;h3&gt;定制自己的Makefile文件，让git提交更方便一点&lt;/h3&gt;
&lt;p&gt;编辑Makefile &lt;code&gt;vim Makefile&lt;/code&gt; ，在github下面添加如下格式的文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nl"&gt;git:&lt;/span&gt;
    &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PELICAN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INPUTDIR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OUTPUTDIR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CONFFILE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PELICANOPTS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ghp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OUTPUTDIR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="n"&gt;gh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ghp-import 是用来Easily import docs to your gh-pages branch，就是方便添加到gh-pages分支的，这个分支github才能解析我们的html嘛。
接着以后：&lt;code&gt;make git&lt;/code&gt; 就可以直接提交到git的gh-pages分支的&lt;/p&gt;
&lt;h3&gt;pelican的备份&lt;/h3&gt;
&lt;p&gt;因为有时候要换电脑，所以肯定要把你的pelican的博客环境做备份，以便换完电脑后快速的搭建出写博客的环境&lt;/p&gt;
&lt;p&gt;进入blog目录：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git branch &lt;span class="c"&gt;#查看本地分支，没有master所以要创建 如果有master就跳过创建&lt;/span&gt;
  gh-pages
&lt;span class="nv"&gt;$ &lt;/span&gt;git branch master &lt;span class="c"&gt;#创建master分支&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout master &lt;span class="c"&gt;#切换到master分支&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git add .
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit -m &lt;span class="s2"&gt;&amp;quot;first post&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git remote add origin git@github.com:zbing3/opslinux.git &lt;span class="c"&gt;#添加过origin就不用添加&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git push origin master  &lt;span class="c"&gt;#有事提交报错，如因原来提交过master分支起冲突，就在后面追加--froce&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;未完待续……&lt;/h2&gt;</summary><category term="pelican"></category><category term="github"></category></entry><entry><title>about</title><link href="http://opslinux.com/post/2013-07-12-about/" rel="alternate"></link><updated>2013-07-12T00:00:00+08:00</updated><author><name>皓禹</name></author><id>tag:opslinux.com,2013-07-12:post/2013-07-12-about/</id><summary type="html">&lt;p&gt;从事Linux运维工作&lt;/p&gt;</summary></entry><entry><title>helloworld</title><link href="http://opslinux.com/post/2013-07-12-helloworld/" rel="alternate"></link><updated>2013-07-12T00:00:00+08:00</updated><author><name>皓禹</name></author><id>tag:opslinux.com,2013-07-12:post/2013-07-12-helloworld/</id><summary type="html">&lt;p&gt;总想找个地方写博客，分享下自己所学的东西，原来因为种种原因一直没坚持下来，这次用了github和pelican搭建了个静态博客，使用git上传真的很爽，就是markdown这玩应我不是太会用，还的慢慢学学，大家都说他好用，我也不知道到为什么，学着看吧与大家共勉，开源世界的软件，总能给人们带来美好的东西。&lt;/p&gt;</summary><category term="随笔"></category></entry></feed>